---
layout: page
title: Steps
permalink: /steps/
---
PowerVM, bare metal and KVM based Power Systems are supported with Red Hat OpenShift. Automation of Openshift on Power  helps to automate business operations with an integrated platform. OpenShift Container Platform (OCP) 4.x can be deployed on [PowerVM LPARs using PowerVC](https://github.com/ocp-power-automation/ocp4-upi-powervm) or [KVM VMs using libvirt](https://github.com/ocp-power-automation/ocp4-upi-kvm). For OpenShift Container Platform (OCP) 4.x on PowerVM an important assumption is that PowerVC is used as the Infrastructure as a service (IaaS) layer for managing the PowerVM LPARs. You'll need to  fulfill the [Image and LPAR requirements](https://github.com/ocp-power-automation/ocp4-upi-powervm#image-and-lpar-requirements) by creating RedHat CoreOS (RHCOS) and RHEL 8.0 (or later) image in PowerVC . For RHCOS image creation, follow the steps mentioned in the following [doc](https://github.com/ocp-power-automation/ocp4-upi-powervm/blob/master/docs/coreos-image-creation.md). Similarly , [Image and VM requirements](https://github.com/ocp-power-automation/ ocp4-upi-kvm#image-and-vm-requirements) needs to be fulfilled to configure the images required for the automation on KVM. On PowerVM based systems such as the enterprise E/S/L systems, there is no host OS and CoreOS is the guest OS. On KVM based systems such as the AC922 and IC922, the host OS is Red Hat Enterprise Linux and CoreOS is the guest OS. CoreOS as the host OS is for the bare metal deployments.

![Image](https://i.imgur.com/6bN0rGB.png)

Standalone PowerVM, PowerVM LPARs and KVM VMs leverage the [ansible playbook](https://github.com/RedHatOfficial/ocp4-helpernode) to set up a helper node (bastion) for OCP deployment. [Helper Node](https://github.com/RedHatOfficial/ocp4-helpernode) is an "all-in-one" node that has all the infrastructure/services in order to install OpenShift 4. The helper node manages a number of services that are used to install, configure, and access an OpenShift cluster. After you [run the playbook](https://github.com/ocp-power-automation/ocp4-playbooks), you'll be ready to begin the installation process. For deploying OpenShift Container Platform (OCP) 4.x on PowerVM LPARs or on KVM VMs using libvirt, it is important to identify a remote client machine for running the automation.

Install the below required packages on the client machine.

* Git: install the latest [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
* Terraform >= 0.13.0 for PowerVM and Terraform >= 0.12.2, < 0.13 for KVM VMs. Please refer to the instructions on [installing Terraform](https://learn.hashicorp.com/terraform/getting-started/install.html). For validating the version run terraform version command after install.
* Public internet connection for all the nodes to download the playbooks and images as part of the setup process.

Terraform is an open source “Infrastructure as Code” tool, created by HashiCorp. Terraform is Platform agnostic, that is , it can be used with any cloud services provider. It sets up an immutable infrastructure, which means that with each change to the environment, the current configuration automatically replaces to a new one that accounts for the modification, and the infrastructure is accounted for. To add to advantage, previous configurations can be retained as versions to enable rollbacks if desired.

Terraform modules are small, reusable Terraform configurations for multiple resources that are used together. Terraform modules provide a flexible way to automate complex resources with reusable and configurable constructs. Writing even a very simple Terraform file results in a module. 
Running [Terraform with the IBM Cloud provider](https://github.com/ocp-power-automation/terraform-provider-ibm#using-the-provider) plugin on your system is quite simple.To support a multi-cloud approach, Terraform works with cloud providers. A cloud provider is responsible for understanding the resources that you can provision, their API, and the methods to expose these resources in the cloud. To provision resources in IBM Cloud, you must install the IBM Cloud Provider plug-in for Terraform. An implementation of generated Ansible modules using the [IBM Cloud Terraform Provider](https://github.com/IBM-Cloud/terraform-provider-ibm) is setting up VPC Virtual Server Instance or IBM Power Virtual Server in IBM Cloud.

[IBM Power Virtual Server](https://github.com/IBM-Cloud/terraform-provider-ibm/tree/master/examples/ansible/examples/simple-vm-power-vs) through IBM Cloud Ansible Module creates a Power Systems Virtual Server running AIX or IBMi. The server is configured to allow incoming SSH connections through a publicly accessible IP address and authenticated using the provided SSH key.Whereas VPC Virtual Server Instance through IBM Cloud Ansible Module creates a Virtual Server Instance (VSI) inside of a [Virtual Private Cloud](https://github.com/ocp-power-automation/terraform-provider-ibm/tree/master/examples/ansible/examples/simple-vm-ssh). The VSI is configured to allow incoming SSH connections through a publicly accessible IP address and authenticated using an SSH key pair.
